generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ReportCategory {
  Spam
  SexuallyInappropriate
  ExtremePolitical
  PromotingViolence
  Harassment
  SuicideOrSelfInjury
  FalseInformation
  IntellectualPropertyViolation
  Other
}
enum QuestionReportCategory {
  Spam
  SexuallyInappropriate
  ExtremePolitical
  Duplicate
  SuicideOrSelfInjury
  Other
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique @db.VarChar(35)
  name       String     @db.VarChar(32)
  password   String     @db.VarChar(128)
  createdAt  DateTime   @default(now())
  followers  Follower[]
  blogsPosts BlogPost[]
  questions  Question[]
}

model BlogPost {
  id        Int            @id @default(autoincrement())
  title     String         @db.VarChar(128)
  body      Json
  tags      String         @db.VarChar(32)
  category  String         @db.VarChar(32)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  published Boolean        @default(true)
  likes     Likes[]
  dislikes  Dislikes[]
  reports   ReportBlogs[]
  commnets  BlogComments[]
  userID    Int?
  author    User?          @relation(fields: [userID], references: [id])

  @@index([userID])
}

model BlogComments {
  id         Int       @id @default(autoincrement())
  body       String    @db.VarChar(8192)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   Int?
  postId     Int?
  BlogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?

  @@index([blogPostId])
}

model Follower {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  followerId Int?
  User       User?    @relation(fields: [userId], references: [id])
  userId     Int?

  @@index([userId])
}

model Likes {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  postId     Int?
  BlogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?

  @@index([blogPostId])
}

model Dislikes {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  postId     Int?
  BlogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?

  @@index([blogPostId])
}

model Question {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(128)
  body             Json               @db.Json   @default("{}")
  category         String             @db.VarChar(32)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  questionreply    QuestionReply[]
  questionUpvote   QuestionUpvote[]
  questionDownvote QuestionDownvote[]
  reports          ReportQuestions[]
  authorId         Int?
  User             User?              @relation(fields: [userId], references: [id])
  userId           Int?

  @@index([userId])
}

model QuestionReply {
  id         Int       @id @default(autoincrement())
  body       String    @db.VarChar(8192)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   Int?
  questionId Int?
  Question   Question? @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model QuestionUpvote {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  questionId Int?
  Question   Question? @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model QuestionDownvote {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  questionId Int?
  Question   Question? @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

model ReportBlogs {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  postId      Int?
  category    String    @db.VarChar(32)
  description String?   @db.VarChar(512)
  BlogPost    BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId  Int?

  @@index([blogPostId])
}

model ReportQuestions {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  questionId Int?
  Question   Question? @relation(fields: [questionId], references: [id])

  @@index([questionId])
}

// pull the schema from db: npx prisma db pull
// push the schema to db: npx prisma db push
// format the schema file: npx prisma format
// generate the prisma client: npx prisma generate
// migrate the schema: npx prisma migrate dev --name init
// reset the db: npx prisma migrate reset
// seed the db: npx prisma db seed --preview-feature
// reset the db and seed: npx prisma migrate reset --preview-feature && npx prisma db seed --preview-feature
