generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique @db.VarChar(35)
  name       String     @db.VarChar(32)
  password   String     @db.VarChar(128)
  createdAt  DateTime   @default(now())
  blogsPosts BlogPost[]
}

model BlogPost {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(128)
  body      Json
  tags      String   @db.VarChar(32)
  category  String   @db.VarChar(32)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  userID    Int?
  author    User?    @relation(fields: [userID], references: [id])
}

model BlogComments {
  id        Int      @id @default(autoincrement())
  body      String   @db.VarChar(8192)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int?
  postId    Int?
}

model Follower {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  followerId Int?
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int?
}

model Dislikes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int?
}

model Question {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(128)
  body      String   @db.VarChar(8192)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int?
}

model QuestionReply {
  id         Int      @id @default(autoincrement())
  body       String   @db.VarChar(8192)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorId   Int?
  questionId Int?
}

model QuestionUpvote {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId Int?
}

model QuestionDownvote {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId Int?
}

model ReportBlogs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int?
}

model ReportQuestions {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId Int?
}

// pull the schema from db: npx prisma db pull
// push the schema to db: npx prisma db push
// format the schema file: npx prisma format
// generate the prisma client: npx prisma generate
// migrate the schema: npx prisma migrate dev --name init
// reset the db: npx prisma migrate reset
// seed the db: npx prisma db seed --preview-feature
// reset the db and seed: npx prisma migrate reset --preview-feature && npx prisma db seed --preview-feature
